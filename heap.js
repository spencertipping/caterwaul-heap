caterwaul.module( 'heap' ,function($) { (function( ) {var methods= {push:function() { /* unary ; node */var xs=arguments;
return(function(it) {return(xs.length===1?it.heapify_up(it.elements.push(xs[0] ) -1) : (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (it.heapify_up(it.elements.push(x) -1) ) ;
return xs} ) .call(this,Array.prototype.slice.call( (xs) ) ) ) ,it} ) .call(this, (this) ) } ,pop:function( /* unary , node */n) {;
return n? (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( (this.pop_one() ) ) ;
return xr} ) .call(this, (function(i,u,s) {if( (u-i) *s<=0)return[ ] ;
for(var r= [ ] ,d=u-i;
d>0?i<u:i>u;
i+=s)r.push(i) ;
return r} ) ( (0) , (n) , (1) ) ) :this.pop_one() } ,peek:function( /* unary , node */) {;
return this.elements[0] } ,size:function( /* unary , node */) {;
return this.elements.length} ,pop_one:function( /* unary , node */) {;
return(function(it) {return( (function(it) {return( ( (this.size() ) && (this.elements[0] =it, (this) .heapify_down( /* unary , node */0) ) ) ) ,it} ) .call(this, (this.elements.pop() ) ) ) ,it} ) .call(this, (this.elements[0] ) ) } ,swap:function(i,j) {;
return(function( ) {var e=this.elements[i] ;
return(this.elements[i] =this.elements[j] ,this.elements[j] =e) } ) .call(this) } ,heapify_up:function( /* unary , node */i) {;
return( (this.above(this.elements[i] ,this.elements[i>>>1] ) ) && ( (function(it) {return(this.heapify_up(i>>>1) ) ,it} ) .call(this, (this.swap(i>>>1,i) ) ) ) ) } ,heapify_down:function( /* unary , node */i) {var l=i<<1;
var r=l+1;
return r<this.size() &&this.above(this.elements[r] ,this.elements[l] ) ? ( (this.above(this.elements[r] ,this.elements[i] ) ) && ( (function(it) {return( (this) .heapify_down( /* unary , node */r) ) ,it} ) .call(this, (this.swap(i,r) ) ) ) ) : ( (this.above(this.elements[l] ,this.elements[i] ) ) && ( (function(it) {return( (this) .heapify_down( /* unary , node */l) ) ,it} ) .call(this, (this.swap(i,l) ) ) ) ) } } ;
return( (function(it) {return($.merge(it.prototype,methods) ) ,it} ) .call(this, ($.heap=function( /* unary , node */above) {;
return(function(it) {return(it.elements= [ ] ,it.above=above|| (function(a,b) {return a<b} ) ) ,it} ) .call(this, (this) ) } ) ) ) } ) .call(this) } ) ;
