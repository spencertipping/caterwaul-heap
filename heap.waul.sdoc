Caterwaul heap implementation | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This module implements a simple array-backed heap for Caterwaul. There isn't anything remarkable about it. It defaults to being a minheap on the native < ordering (a minheap) unless you
specify a different function to use.

caterwaul.module('heap', 'js_all', function ($) {
  $.heap(above) = this -se [it.elements = [], it.above = above || a < b |given [a, b]], se [it.prototype /-$.merge/ methods],

  where [methods = capture [push(xs = arguments) = this -se [xs.length === 1 ? it.heapify_up(it.elements.push(xs[0]) - 1) : +xs *![it.heapify_up(it.elements.push(x) - 1)] -seq],
                            pop(n)               = n ? n[n] *[this.pop_one()] -seq : this.pop_one(),
                            peek()               = this.elements[0],
                            size()               = this.elements.length,

                            pop_one()                              = this.elements[0] -se- this.elements.pop() /se [this.elements[0] = it, this /~heapify_down/ 0, when [this.size()]],
                            swap(i, j)                             = where [e = this.elements[i]] [this.elements[i] = this.elements[j], this.elements[j] = e],
                            heapify_up(i)                          = this.swap(i >>> 1, i) -se- this.heapify_up(i >>> 1) -when- this.elements[i] /-this.above/ this.elements[i >>> 1],
                            heapify_down(i, l = i << 1, r = l + 1) = r < this.size() && this.elements[r] /-this.above/ this.elements[l]
                                                                       ? this.swap(i, r) -se- this /~heapify_down/ r -when- this.elements[r] /-this.above/ this.elements[i]
                                                                       : this.swap(i, l) -se- this /~heapify_down/ l -when- this.elements[l] /-this.above/ this.elements[i]]]});
